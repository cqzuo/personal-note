#+OPTIONS: "\n:t"
maven2 笔记
* 基本配置 setting.xml
** 本地仓库目录
 <localRepository>本地仓库目录路径</localRepository>
** 代理
 <proxy>
   <id>optional</id>
   <active>true</active>
   <protoclo>http</protocol>
   <host>ip地址</host>
   <port>端口号</port>
   <noProxyHosts>ip地址</noProxyHosts>
 </proxy>
** 存储库
*** 在应用程序中使用多个repository
<repositories>
  <repositoy>
    <id>仓库1</id>
    <name></name>
    <url></url>
  <repository>
  <repositoy>
    <id>仓库2</id>
    <name></name>
    <url></url>
  <repository>
<repositroies>
* 基本配置 pom.xml
** 继承的写法
<parent>
  <groupId></groupId>
  <aritfactId></artifactId>
  <version></version>
  <relativePath></relativePath>
</arent>
* 常见命令
** 创建java项目
*** mvn archtype:create -DgroupId=包名称即文件的目录结构 -DartifactId=生成的文件名称
** 创建web项目
*** mvn archtype:create -DgroupId=包名称即文件的目录结构 -DartifactId=生成的文件名称 -DarchtypeArtifactId=maven-archetype-webapp
** 编译源码
*** mvn compile
** 编译测试源码
*** mvn test-compile
** 运行测试
*** mvn test
** 产生site
*** mvn site
** 打包
*** mvn package
** 在本地仓库中安装jar
*** mvn install
** 清除产生的项目
*** mvn clean
** 生成eclipse项目
*** mvn eclipse:eclipse
*** 还需在eclipse中建立M2_REPO变量,变量值指向maven2的数据仓库位置
** 生成idea项目
*** mvn idea:idea
** 组合使用goal命令
*** mvn -Dtest package
** 只打包Jar
*** mvn jar:jar
** 只测试不编译和测试编译
*** mvn tes -skipping compile -skipping test-complie
** 清楚eclipse中的一些系统设置
*** mvn eclise:clean
** 将本地jar安装到仓库中
*** mvn install:install -file -Dfile=文件名 -DgroupId=包名 -DartifactId=文件名 -Dversion=版本号 -Dpackage=jar
