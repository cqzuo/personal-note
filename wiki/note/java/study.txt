/**/java 的基本程序结构
1.java对大小写敏感
2.JAVA应用程序中所有的方法都放在类里
3.java类的名字必须以大写字母开头，如果是多个单词，则每个单词的第一个字母一般大写
4.源码文件名字一般跟共有类的名字相同，必须以JAVA后缀
5.java中 main必须是静态的
6. .用来调用方法
7.java没有unsigned 类型
8.int 4 short 2 long 8 byte 1 字节数
9.浮点型 float4 double 8 没有后缀f的默认为double
10.utf-16编码采用不同长度的编码表示所有的unicode代码点 每个字符用16位表示，称为一个代码单元
11.boolean 类型 只有两个值，不能和整型相互转换
12.JAVA在声明也是一条完整的语句，必须在句子后面加分号
13.JAVA在定义常量时用final,一般使用大写，如果想被类的其他方法引用，可定义为类常量 
   static final ,一般定义在类的外部
14.求幂要借助于 math类的pow方法
    eg int x=30,y=10
       double a=Math.pow(x,y)
15.强制类型转换 （Data）,四舍五入法 （DataType）Math.round(data)
   boolean 类型转换为数值型 expression?1:0
16.JAVA只支持单继承，如果缺省extends则自动继承java.lang.Object
17.java没有内置的字符串类型，而在JAVA类库中有一个String 类
18.枚举类型 变量的值局限于一个有限的集合内：
  enum Size{SAMLL,MEDIUM,LARGE,EXTRALARGE};
  Size s=Size.EXTRALARGE;
19.java没有内置的字符串类型，字符串由char值序列组成，char数据类型是一个采取UTF16的Unicode代码点的代码单元：
  String greeting = "Hellow!"
  int n = greeting.length();
  从一个较大的字符串提取子串：
  String a = "Hellow,the world!";
  String s= a.substring(0,3);  //提取从第一个字符开始的三个字符
  字符串的编辑：
  String a ="The world!";
  a = a.substring(0,4)+" my wife!";
  检测字符串是否相等：
  String a = "HELLOW"
  "Hellow".equals(a);  //"Hellow".equal("HELLOW");
20.输入输出
  Scanner(InputStream in)  //用指定的输入流来定义一个Scanner对象
  String next()  //读取下一行内容
  Int nextInt()  //读取下一行内容并转换为Int型
  Double nextDouble() //读取下一行内容并转换为Double类型
 /*测试Scanner方法*/
  import java.util.*
  public class InputTest
{
  public static void main(String[] args)
  { 
    Scanner in = new Scanner(System.in);
    System.out.println("姓名：")；
    String name = in.nextLine();
    System.out.println("年龄：")；
    int age = in.nextInt();
    System.out.println("你好,"+name+","你明年会是"+(age+1)+"岁。")； 
  }
}
  /*用对话框形式实现上述方法*/
import javax.swing.*;
public class IntputTest
{
  public static void main(String[] args)
  {
    String name=JOptionPane.showInputDialog("please enter your name："); 
    String input=JOptionPane.showInputDialog("your age：");
    int age=Integer.parseInt(input);
    System.out.println("hellow,"+name+",next year you will be"+(age+1));
    System.exit(0);
  }
}
  /*测试调用一个对话框来返回一个字符串*/
import javax.swing.*;
public class InputTest
{
  public static void main(String[] args)
  {
      String name= JOptionPane.showInputDialog("hellow,your name:");
      System.out.println("your name is:"+name);
  }
}
21.有抽象方法的类一定是abstract类，不能建对象；
  final和abstract不能同时使用；
  静态类只能访问静态类的属性；
  native原始方法，调用其他语言编写的方法，不能与abstract同时使用；
  java没有提供运算符重载功能；
22.格式化输出问题
  System.out.print(x) /* */x不能是美元美分符号；
  System.out.print("%8.2f",x); /**/表示8个字符宽度和2个小数位的F精度打印；
  一些常用的转换符 e%指数形式 s%字符串 tx%日期形式 n%分隔符；
23.a.JAVA中不允许在嵌套的两个块中声明相同的变量；
  b.在循环中，检测两个浮点型数是否相等要特别注意0.1无法用二进制表示；
  c.在程序设计中从不使用switch语句；
  d.带标签的break语句 标签必须放在最外层的循环之前，如果输入有误，就通过带标签的break语句跳到带标签的语句块末尾；
24.大数值方法
  java.math中有两个类： BigInteger 和 BigDecimal 可以处理任意长度精度的整数和小数
  BigInteger a = BigIntgervalueOf(value) //将value数值强制处理成大数值；
  BigInteger c = a.add(b)  //c=b+a;
  BigInteger c = a.mutiply(b) //c=a*b ; 
  subtract()  divide()  mod()  //差 商 余 
25.int []a;  int a[];等效，在声明数组后必须用new运算符来创建数组
   int []a; a=new int[100]; 或者 int []a=new int[100];
  如果想获取数组的个数：
  for(int i = 0,i<a.length;i++)System.out.println(a[i]);
  用for each循环,可以循环数组内的所有元素：
  for(int elemant:a)System.out.println(element);
26.BigIntegerTest.java
     
import java.math.*;
import java.util.*;

public class BigIntegerTest
{
  public static void main(String[] args)
   {
   	Scanner in = new Scanner(System.in);
   	 System.out.print("How many numbers do you need draw?");
   	 int d = in.nextInt();
   	 System.out.print("What is the highest number you can draw? ");
   	 int s= in.nextInt();
   	 BigInteger LotteryOdds = BigInteger.valueOf(1);
   	 for(int i = 1;i<=d;i++)LotteryOdds = LotteryOdds.multiply(BigInteger.valueOf(s-i+1)).divide(BigInteger.valueOf(i));
      System.out.println("Your odds are 1 in " + LotteryOdds);   
      System.exit(0);
   	 }
  	 
 }

26.大小数 BigDecimal 各种方法同BigInteger；
27.java注意的问题：main不是类，不必class；注意每行后面的分号必须在英文格式下；注意方法名、变   量名的大小写；
28.在创建数组对象的同时赋初值：
   int[] test = {1,3,5,8,5,4,12,47,14,41,1,1,2,22};//此时不用调用new
   匿名数组的初始化：
   new int[] = {1,3,5,8,5,4,12,47,14,41,1,1,2,22};
   可以用此种方法不创建变量而重新初始化一个数组：
   test = new int[] = {1,3,5,8,5,4,12,47,14,41,1,1,2,22};
   //在java中允许数组的长度为0
29.数组的copy
   java允许一个数组赋值给另一个数组，此时两个变量将引用同一个数组
   int[] test1 = test;
   如果不想引用同一个数组，则可以调用arraycopy方法
   System.arraycopy(test1,test);
   //java不能在数组中通过地址＋1的方法来访问数组的元素；
30.main(String[] args)  表示main方法将接收一个字符串的数组，也就是命令行参数；
   public class Message
{
	public static void main(String[] args)
	{
	 if(args[0].equals("-h"))System.out.print(" Hellow ");
	 else if (args[0].equals("-g"))System.out.print(" Goodby ");
	 for(int i = 1;i<3;i++)
	   System.out.print(""+args[i]);
	 System.out.print(".");	
	}
}

31.要想对数值型数组排序，可以用Arrays类中的sort方法：
   test = new int[] {1,3,5,14,4,2,4,52,15,4,,44,7,87,55,2};
   Arrays.sort(test);
   获取n以内的数： 
   int i= (int)Math.random()*n;
32.将第一个数组的数据复制到第二个数组中
   static void arraycopy(test1,test2);
   使用优化的快速排序算法：
   static void sort(type[] a);  //type[] a 类型为type的数组a
   使用二分法搜索算法：
   static int binarysearch(type[] a);   
   将数组所有元素设置为type类型：
   static void fill(type[] a);
   判别两个数组相等（长度，对应下标也相等）：
   static boolean equals(type[]a,type[]b);
33.多维数组使用下标访问数组元素。
    二维数组
    声明： double[][] balances;
    初始化：balances = new double[2][3];
    如果知道数组元素，可以不用new: int[][] magicsquare = 
                                     {
                                      {15,4,84,8,4784,84,8},
                                      {98,8,565,4,33,0,75,5}
                                     };
    foreach循环语句不能自动处理二维数组，但可以嵌套
    java实际上没有多维数组，只有一维数组     
34.类:构造对象的模版和蓝图;封装(encapsulation):数据隐藏,将数据和行为结合为一个包,并对对象的使用者隐藏数据的实现方式.
   程序仅通过方法来于对象数据进行交互;
   所有的类都来源于超类 object类;
35.类之间的关系:依赖(uses-a) 聚合(has-a) 继承(is-a)
36.要想使用对象,必须先构造对象并初始化,才能施加方法;
   java中是用构造器(constructor)来构造实例的,它是特殊的一种用来构造并初始化对象的方法;
   构造器的名字与类同名,在其前面加new操作符  
37.date类
    System.out.println(new date()); 
    String s = new date().toString();//将返回日期的字符串型描述
    可构造对象变量来实现构造对象的多次使用: Date birthday = new date();
    /**/Date deadline;  此时deadline为Date类的变量,可以引用Date类型的对象,但本身不是对象,不能调用Date类的方法  s = deadline.toString() 是错误的,因为变量deadline没有引用对象;
    对象变量没有包含一个对象,而是引用对象,变量的值是对一个具体对象的引用;
    可以显式将对象变量设置为null.表示没有引用变量:  deadline = null;
38.GregorianCalendear类
    date类只有一个实例的状态,特定的时间点，时间是距离1979年1月1日0点0′0″的毫秒数；
     java设计者决定将保存时间和给时间点命名分开，标准java包含了date和GrogorianCalender类：
     date表示时间点，GregorinCalender类表示日历，此类可扩展为中国的阴历
     eg:  //用date类的方法after 和before
          if(today.before(birthday))System.out.println("Still time to shop for a gift!");
     **date类中的方法不推荐使用**
    如果想在GregorianCanlender类中查询一些设置信息： //访问器
        //Calender.MONTH  Calender.DAY_OF_WEEK 为Calender类中的常量
        GregorianCalender now = new GregorianCalender();
        int month = now.get(Calender.MONTH); 
        int weekday = now.get(Calender.DAY_OF_WEEK);
    改变对象的状态：   //修改器
        GregorianCalender deadline = new GregorianCalender();
        deadline.set(Calender.YEAR,2001);
        deadline.set(Calender.MONTY,Calender.APRIL);
        deadline.set(Calender.DAY_OF_MONTH,15);
     或者一次设置： deadline.set(2001,Calender.APRIL,15);
   为对象增加属性（天数，月数，星期数）：
       deadline.add(Calender.MONTH,13); //后移13个月，如为负，则前移
    date类和GregorianCalender类的相互转化：
     GregorianCalender calender = new GregorianCalender(year,month,day);
     Date hireday = calender.time;
     calender.set(hireDay);
     int year = calenderget（Calender.YEAR）;
     /**/一个显示当前月的日历的程序
     import java.util.*;
public class CalendarTest 
{
	
	
		public static void main(String[] args)
		{
		      //构造一个GregorianCalender类的一个对象d，并用当前的时间初始化
		      GregorianCalendar d = new GregorianCalendar();
		      //获取当前的日期和月份
		      int today = d.get(Calendar.DAY_OF_MONTH);
		      int month = d.get(Calendar.MONTH);
		      //将d设置为这个月的第一天，并获得这一天星期几
		      d.set(Calendar.DAY_OF_MONTH,1);
		      int weekday = d.get(Calendar.DAY_OF_WEEK);
		      //打印头
		      System.out.println("Sun Mon Tue Wed Thu Fri Sat");
		      //在月的第一天前的位置输出空格
		      for (int i = Calendar.SUNDAY;i<weekday;i++)
		      	System.out.print("   ");
		      	//打印月份
		      do
		      {
		      	int day = d.get(Calendar.DAY_OF_MONTH);
		      	//设置打印格式，三个字符位置
		      	System.out.printf("%3d",day);
		      	//在当天的位置标记@号
		      	if(day==today)
		      		System.out.print("@");
		      	//	
		      	else 
		      		System.out.print(" ");
		      	//如果到周六，在下一行打印	
		      	if(weekday ==Calendar.SATURDAY)
		      		System.out.println();
		       //		      		
		      	d.add(Calendar.DAY_OF_MONTH,1);
		      	weekday = d.get(Calendar.DAY_OF_WEEK);
		      }
		      //循环条件：当月内
		      while(d.get(Calendar.MONTH)==month);
		      if(weekday !=Calendar.SUNDAY)
		      	System.out.println();           	
	        }
	}
39.   //一个薪金管理系统
import java.util.*
public class EmployeeTest
{
	public static void main(String[] args)
	{
		//初始化Emloyee类,建立对象数组staff[3],分别赋初值
		Employee[] staff = new Employee[3];
		staff[0] = new Employee("Carl Cracker",75000,1980,12,15);
		staff[1] = new Employee("Harry Hacker",50000,1979,10,1);
		staff[2] = new Employee("Tony Tester",40000,1990,3,15);
		//每个人的工资提高5％
		for(Employee e:staff)e.raiseSalary(5);
		//打印工资提高后的状态
		for(Employee e:staff)System.out.println("name = "+e.getname()+"salary = "+e.getsalary()+"hireday = "+e.gethireday());
		
	} 
}
 class Employee
	{
	         //构造器
	        public Employee(String n,double s ,int year ,int month, int day)
	        {
	        	name = n;
	        	salary = s;
	        	GregorianCalendar Calendar = new GregorianCalendar(year,month-1,day);
	        	hireday = Calendar.getTime();
	        }
	        //访问器
	        public String getname()
	        {
	        	return name;
	        }	
	        public double getsalary()
	        {
	        	return salary;
	        }
	        public Date gethireday()
	        {
	        	return hireday;
	        }
	        //更改器
	        public void raiseSalary(double bypercent)
	        {
	        	double raise = salary*bypercent/100;
	        	return raise;
	        }
	        //数据域
	        private String name;
	        private double salary;
	        private Date hireday;
	        
	}
40.一般将每个类存入一个单独的文件内，如果在一个类的文件中发现了使用了别的类，编译器会自动查找编译；
   一般将实例域标记为private;
   构造器和其他的方法不同的是，总是伴随着new被调用，并且不能对一个已经存在的对象调用构造器来重新实例化；
   所有的java对象都是在堆中构造的；
   不要在构造器中使用和实例域相同的变量名；
   显式参数式明显地列在方法中声明的显示参数，隐式参数可以不出现在方法声明的参数，一般用this表示隐式参数；
   一个类的结构：私有数据域＋公有域访问器方法＋公有域更改器方法；
   不要编写返回引用可变对象的访问器，如要返回，使用clone：
     return(Date)hireday.clone();
   一个类中的方法可以访问所属类的所哟有对象的私有数据；
 41.可以将实例域定义为final，来确保构造器执行之后不会对它进行修改；
   如果将域定义为static，那每个类中只有一个这样的域，属于类而不属于任何对象，即使没有对象，域仍然存在；
   静态常量的使用： 
     public class Math
      {static final double pi = 3.1415926;
      }
   使用时就可以调用math.pi;
   静态方法时不能向对象施加操作的方法，Math.pow(x,a),但可以访问自身类的静态域；
   静态方法的常见应用，NumeFormat类使用Factory方法产生不同风格：
     NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();
     NumberFormat percentFormatter = NumberFormat.getpercentInstance();
     double x= 0.1;
     System.out.println(currencyFormatter.format(x));  //prints $0.1
     System.out.println(percentFormatter.format(x));   //prints 10%
42.不必使用对象来调用静态方法；如不必构造math类的对象就能使用math.pow(x,a);
   每个类都可以有个main方法，用来对类进行单元测试
43.Employee类的一个简单版本：
     public class StaticTest
{
	public static void main(String[] args)
	{
		//初始化Employee类的对象数组
		Employee[] staff = new Employee[3];
		staff[0] = new Employee("Tom",40000);
		staff[1] = new Employee("Dick",50000);
		staff[2] = new Employee("Harry",532000);
		//显示个人工资和ID情况
		for(Employee e:staff)
		{
			e.setId();
			System.out.println("name = "+e.getName()+",id = "+e.getId()+",salary = "+e.getSalary());
			
		}
		//显示NextId的值
		int n = Employee.getNextId();
		System.out.println("The next available id = "+n);
		   
	}
	
}
class Employee
	{       
		//构造器
		public Employee(String n ,double s)
		{
		             name = n ; 
		             salary = s;
		             id = 0;
		}
		public String getName()
		{
			return name;
		}
		public double getSalary()
		{
			return salary;
		}
		public int getId()
		{
			return id;
		}
		//id是由静态变量NextId传递的
		public void setId()
		{
			id = nextId;
			nextId++;
		}
		//调用静态变量的静态方法
		public static int getNextId()
		{
			return nextId;
		}
		//测试用main方法，永远不会被执行
		public static void main(String[] args)
		{
			Employee e =new Employee("Harry",50000);
			System.out.println(e.getName()+""+e.getSalary());
		}
		private String name;
		private double salary;
		private int id;
		private static int nextId = 1;     // define a static viailable nextId
	} 
   44.方法参数：值调用（call by value）,java使用的调用方式，得到的是参数的一个copy，确保传递的参数不会被修改
                引用调用(call by reference)
                当对象作参数时，可以用方法调用来改变对象的某些属性（方法得到的是对象引起的copy，对象引用及其他的copy同时引用同一个对象）；
                一个方法不能让对象参数引用一个新的对象，
   45.重载      如果多个方法有相同的名字，不同的参数，便产生了重载（overloading）
                编译器能自动根据参数的类型个数来选择恰当的函数；
   46.默认域初始化 
                如果在构造器中没有显式地赋予初值，编译器会自动赋值默认值（数值0 布尔false 对象引用null）;
   47.默认构造器 
                没有参数的构造器，如提供了的构造器不是默认的，那么必须在构造器中提供参数；
   48.在类的定义中，可以简单地将一个值赋给任何域,将相同的值域赋给特定的实例域；
             class Employee
             {
             	pirvate String name = "tomy";
             }                 
       初始值也可以由方法提供的变量
             class Employee
             {
             	....
             	static int assignId()
             	{
             		int r = nextId;
             		nextId++;
             		return r;
             	}
             	...
             	private int id = assignId();
             }          
                                                        
    49.参数名定义的技巧：
                用单个字符    public Employee(String n,double s){}
                在实例域前加a  public Employee(String aName,double Asalary){}
                用this       public Employee(String name,double salary){this.name=name;this.salary=salary; }
    50.                        
    
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
     
   
   
	
	


     
     
     
         

    
       
  
