泛型DAO类设计模式，里面的泛型dao类非常强大，只要让每个dao继承这个类并可以完成基本的crud操作，可是对于一些"特殊"的方法我却不知道加在service层还是dao层了，拿我目前的项目来说，一个考试系统，查询成绩，可能要 根据考试来查询所有考生的成绩、根据参加考试的部门查询考生的成绩、根据部门提供的岗位查询考试的成绩，当然还有根据准考证等，对这几个查询需要两三个方法，比如 
Java代码 
List<ExamScore> getExamScoreA();  
List<ExamScore> getExamScoreB();  
List<ExamScore> getExamScoreC();  
1.如果将方法主要属于业务层，那么很简单，dao不用增加新的方法了，我只要在三个方法里面构造适当的hql，然后调用dao的findByHql(int offset,int pageSize)分页方法，就像这样: 
Java代码 
List<ExamScore> getExamScoreA(){  
  String hql="from ExamScore....";  
  scoreDao.findByHql(hql,offset,pageSize);  
};  
  
.....  
这样的问题在于service层出现一大堆hql，最初的影像中，dao好像是为了彻底分离业务层和数据库访问层，是开发人员更加专注于编写数据访问逻辑的代码，各个dao组建一般应该封装针对数据库中一个表的数据访问逻辑，但是如果采用这种写法好像数据访问逻辑由业务层和dao共同来完成了，dao貌似只是一个工具类，而且对许多人所说的，万一哪台不用hibernate，不是业务层的代码得改的半死！！！唯一的好处就是一个dao里面7，8个方法，通过传入hql可以基本搞定所有的数据操作 
2.如果将方法放到dao，那么将是这样的: 
Java代码 
List<ExamScore> getExamScoreA(){  
  scoreDao.findExamScoreA(offset,pageSize);  
};  
.....  
这种方法将hql放到了dao内，具体的dao实现类调用了findByHql(hql,offset,pageSize)方法，采用这种方式对于"哪天不用hibernate的当心是没有了，"而且业务层的代码也更加清晰了，没有一堆的hql! 
可是问题在于，采用这种方法每增加一个业务方法，大多数情况下都得增加一个dao方法，特别是对于这种查询来说，几乎是100%的概率，觉得很是麻烦(因为我还有和查询成绩差不多的查询录取名单，查询报名考生等),而且业务层其实只是对dao的一个调用 
以上两种方法的利弊，我实在权衡不下来，看了以前的帖子好像应该采用第二种方法，而且我以前的做法也是这样的，可是最近每增加一个业务查询方法，dao都得增加一个方法(有一点点夸张)，让我觉得实在麻烦，所以又有些地方采用了第一种方法，导致现在项目的代码里有些混乱，而且这点疑惑几乎让我已经写不了代码了，所以上来请各位拍砖，给点意见
我的做法是：用标准的JPA实现，废弃掉DAO层，直接在Service用EQL写上业务逻辑。
单元测试的时候，直接用测试环境的数据库测试，懒得写模拟DAO了。
不知道这是否何你意。
返回顶楼	   0 0
碧海山城
等级: 初级会员
不用hibernate?????? 
那你的底层不就没了....... 
你的底层就是为了业务而搭的.... 
底层都换了... 
怎么可能不改代码...... 
就别说不用hibernate了 就只是版本换一下.....改的代码量就不会少.... 
P.S: DAO永远不要和业务挂勾........ 
再P.S: 只是一个业务的一个查询......你都写到那么深..... 
那他前面的server是干嘛的.... 
你打算把所有的业务全写在最深层么...... 
那还分什么层......直接把DAO拿到最外面得了.....还要什么server
P.S: DAO永远不要和业务挂勾........ 
再P.S: 只是一个业务的一个查询......你都写到那么深..... 
那他前面的server是干嘛的.... 
你打算把所有的业务全写在最深层么...... 
那还分什么层......直接把DAO拿到最外面得了.....还要什么server 
是很有道理，可是一堆的hql或者sql出现在service好么。我以前一直认为只有两种写法，一种dao尽量写的细些，业务层大多数只是对dao调用的一句代码而已，或者有些获得什么汇率啊积分啊，再诚意多少之类的操作，第二种就是dao相当于工具类，传入sql，或者够找好criterion，就可以获得集合或者对象了 
ps：第一种方法好像有些过度设计了，确实好像所有都写到最下层来了 
    采用第二种方法是方便很多，只是和我从很多书上看到的或者一直认为的不一样吧，所以一下不能接受 
再ps：是不是我堆dao和service的理解有误啊
