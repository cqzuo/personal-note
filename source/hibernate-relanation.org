#+OPTIONS:"\n:t"
hibernate关系映射小结
* 实体类
  相同类型对应关系(不分外键主键连接表)实体类完全相同
** 单向
*** 一对一
  一个类正常
  一个类包含另一个类作为其属性
***  一对多
 一个类正常
 一个类的Set集合来作为另一个类的属性
*** 多对一
 同一对一
*** 多对多
 同一对多
** 双向
*** 一对一
 2个类都互为对方的属性
 都实现Serializable接口
 都含有Long id 作为其属性 
*** 一对多
 都实现Serializable接口
 一个类的Set集合来作为另一个类的属性
 一个类作为另一个类的属性
*** 多对多
 一个类的Set集合来互相作为对方类的属性	
* 表模型
 相同键关联类型(不分对应关系)表模型相同
** 单向
*** 外键
 一个表中的主键在另一个表中
*** 主键
 正常
*** 连接表
 新增连接表,其中一个表的主键在连接表中做主键
** 双向
*** 一对一
**** 外键
2个表中有相同列 id作为其主键
一个表的主键在另一个表中
**** 主键
 2个表中有相同列 id来进行关联
**** 连接表
 新增连接表,其中一个表的主键在连接表中做主键
*** 一对多
**** 外键
 一个表中的主键在另一个表中
**** 连接表
 新建连接表,2个表中的主键都在连接表中为主键
*** 多对多
 同一对多连接表
 新建连接表,2个表中的主键都在连接表中为主键
* 映射定义
** 单向
*** 一对一
**** 外键
 一个类正常配置
 另一个类用 many-to-one 来配置外键关联
 <many-to-one name="该类中关联另一个对象的属性" column="该属性对应的外键" unique="true"/>
**** 主键
 一个类正常配置
 另一个类用 one-to-one 来配置主键关联
  <one-to-one name="该类中关联另一个对象的属性"  constrained="true"/>
**** 连接表
 一个类正常配置
 另一个类用 join 来配置连接表
 <join table="连接表名称">
   <key column="连接表的主键"/>
   <many-to-one name="实体类中关联另一个类的属性" unique="true"/>
 </join>
*** 一对多
**** 外键
 一个类正常配置
 另一个类用 set 配置 外键关联
 <set  name="该类中关联另一个对象的属性" table="关联到的另一个表名称" cascade="all">
   <key name="关联到的另一个表的主键"/>
   <one-to-many class=""/>
 </set>
**** 连接表
*** 多对一
**** 外键
**** 连接表
*** 多对多
** 双向
*** 一对一
**** 外键
**** 主键
**** 连接表
*** 一对多
**** 外键
**** 连接表
*** 多对一
**** 外键
**** 连接表
*** 多对多
